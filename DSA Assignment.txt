A)Implement Dynamic implementation of circular queue of integers with following operation:
- Initialize(),insert(), delete(), isempty(), isfull(), display()


class CircularQueue {
    private int[] queue;
    private int front, rear, size;
    private static final int INITIAL_CAPACITY = 5;

    public CircularQueue() {
        queue = new int[INITIAL_CAPACITY];
        front = 0;
        rear = -1;
        size = 0;
    }

    public void initialize() {
        queue = new int[INITIAL_CAPACITY];
        front = 0;
        rear = -1;
        size = 0;
    }

    public void insert(int value) {
        if (isFull()) {
            System.out.println("Queue is full, increasing capacity.");
            increaseCapacity();
        }
        rear = (rear + 1) % queue.length;
        queue[rear] = value;
        size++;
    }

    public int delete() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return -1; 
        }
        int value = queue[front];
        front = (front + 1) % queue.length;
        size--;
        return value;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == queue.length;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return;
        }
        System.out.print("Queue elements: ");
        for (int i = 0; i < size; i++) {
            System.out.print(queue[(front + i) % queue.length] + " ");
        }
        System.out.println();
    }

    private void increaseCapacity() {
        int newSize = queue.length * 2;
        int[] newQueue = new int[newSize];
        for (int i = 0; i < size; i++) {
            newQueue[i] = queue[(front + i) % queue.length];
        }
        queue = newQueue;
        front = 0;
        rear = size - 1;
    }

    public static void main(String[] args) {
        CircularQueue cq = new CircularQueue();
        cq.insert(10);
        cq.insert(20);
        cq.insert(30);
        cq.display();
        System.out.println("Deleted: " + cq.delete());
        cq.display();
        cq.insert(40);
        cq.insert(50);
        cq.insert(60); 
        cq.display();
    }
}

B) Write a  program to sort elements of a singly linked list in ascending order and display the sorted List.

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class SinglyLinkedList {
    private Node head;

    
    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    
    public void sort() {
        head = mergeSort(head);
    }

    
    private Node mergeSort(Node head) {
        if (head == null || head.next == null) {
            return head;
        }

        Node middle = getMiddle(head);
        Node nextOfMiddle = middle.next;

        middle.next = null; 

        Node left = mergeSort(head);
        Node right = mergeSort(nextOfMiddle);

        return sortedMerge(left, right);
    }

    
    private Node getMiddle(Node head) {
        if (head == null) return head;

        Node slow = head, fast = head.next;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    
    private Node sortedMerge(Node left, Node right) {
        if (left == null) return right;
        if (right == null) return left;

        Node result;

        if (left.data <= right.data) {
            result = left;
            result.next = sortedMerge(left.next, right);
        } else {
            result = right;
            result.next = sortedMerge(left, right.next);
        }
        return result;
    }

    public void display() {
        Node current = head;
        if (current == null) {
            System.out.println("The list is empty.");
            return;
        }
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        SinglyLinkedList list = new SinglyLinkedList();
        list.insert(30);
        list.insert(10);
        list.insert(50);
        list.insert(20);
        list.insert(40);

        System.out.println("Original list:");
        list.display();

        list.sort();

        System.out.println("Sorted list:");
        list.display();
    }
}


C) Write a program to create Circular Singly Link list and display it.
class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class CircularSinglyLinkedList {
    private Node head;

    
    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            newNode.next = head;
        } else {
            Node current = head;
            while (current.next != head) {
                current = current.next;
            }
            current.next = newNode;
            newNode.next = head; 
        }
    }

    
    public void display() {
        if (head == null) {
            System.out.println("The list is empty.");
            return;
        }
        Node current = head;
        do {
            System.out.print(current.data + " -> ");
            current = current.next;
        } while (current != head);
        System.out.println("(head)");
    }

    public static void main(String[] args) {
        CircularSinglyLinkedList list = new CircularSinglyLinkedList();
        list.insert(10);
        list.insert(20);
        list.insert(30);
        list.insert(40);

        System.out.println("Circular Singly Linked List:");
        list.display();
    }
}


D)  Write a  program to read n integers and create two lists such that all positive numbers are in one list and negative numbers are in another list. Display both the lists.

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class SeparateNumbers {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> positiveNumbers = new ArrayList<>();
        List<Integer> negativeNumbers = new ArrayList<>();

        System.out.print("Enter the number of integers (n): ");
        int n = scanner.nextInt();

        System.out.println("Enter " + n + " integers:");

        for (int i = 0; i < n; i++) {
            int number = scanner.nextInt();
            if (number >= 0) {
                positiveNumbers.add(number);
            } else {
                negativeNumbers.add(number);
            }
        }

        System.out.println("Positive Numbers List: " + positiveNumbers);
        System.out.println("Negative Numbers List: " + negativeNumbers);
        
        scanner.close();
    }
}


E)Write a  program to count all non-zero elements, odd numbers and even numbers in the singly linked list.

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class SinglyLinkedList {
    private Node head;

    
    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

   
    public void countElements() {
        int nonZeroCount = 0;
        int oddCount = 0;
        int evenCount = 0;

        Node current = head;
        while (current != null) {
            if (current.data != 0) {
                nonZeroCount++;
            }
            if (current.data % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
            current = current.next;
        }

        System.out.println("Non-zero elements: " + nonZeroCount);
        System.out.println("Odd numbers: " + oddCount);
        System.out.println("Even numbers: " + evenCount);
    }

   
    public void display() {
        Node current = head;
        if (current == null) {
            System.out.println("The list is empty.");
            return;
        }
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        SinglyLinkedList list = new SinglyLinkedList();
        list.insert(10);
        list.insert(21);
        list.insert(0);
        list.insert(34);
        list.insert(-5);
        list.insert(0);
        list.insert(15);

        System.out.println("Singly Linked List:");
        list.display();

        list.countElements();
    }
}



F) Write a  program which accept the string and check whether the string is Palindrome or not using stack. (Use Static/Dynamic implementation of Stack)

import java.util.Scanner;

class Stack {
    private char[] stack;
    private int top;
    private int capacity;

    public Stack(int size) {
        capacity = size;
        stack = new char[capacity];
        top = -1;
    }

    public void push(char c) {
        if (top + 1 == capacity) {
            System.out.println("Stack is full. Unable to push: " + c);
            return;
        }
        stack[++top] = c;
    }

    public char pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Unable to pop.");
            return '\0'; 
        }
        return stack[top--];
    }

    public boolean isEmpty() {
        return top == -1;
    }
}

public class PalindromeChecker {

    public static boolean isPalindrome(String str) {
        Stack stack = new Stack(str.length());

       
        for (char c : str.toCharArray()) {
            stack.push(c);
        }

        
        for (char c : str.toCharArray()) {
            if (c != stack.pop()) {
                return false; 
            }
        }

        return true; 
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String input = scanner.nextLine();

        if (isPalindrome(input)) {
            System.out.println("\"" + input + "\" is a palindrome.");
        } else {
            System.out.println("\"" + input + "\" is not a palindrome.");
        }

        scanner.close();
    }
}


	

